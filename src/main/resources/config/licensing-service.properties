example.property= I AM THE DEFAULT


spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql = true
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName= org.postgresql.Driver
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

spring.cloud.loadbalancer.ribbon.enabled = false



management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true
management.endpoint.health.enabled = true
management.endpoint.health.show-details = always

# Registers the IP address of the service rather than the server name
eureka.instance.preferIpAddress = true
# Registers the service with Eureka
eureka.client.registerWithEureka = true
# Pulls down a local copy of the registry
eureka.client.fetchRegistry = true
# Sets the location of the Eureka service
eureka.client.serviceUrl.defaultZone = http://eurekaserver:8070/eureka/

spring.cloud.function.definition = consumer
spring.cloud.stream.kafka.bindings.consumer-in-0.consumer.configuration.value.deserializer = com.optimagrowth.license.events.coverters.OrganizationChangeModelDeSerializer
spring.cloud.stream.kafka.binder.brokers= kafka:9092
spring.cloud.stream.bindings.consumer-in-0.destination = orgChangeTopic
spring.cloud.stream.bindings.consumer-in-0.group = licensingGroup
# This enables using the custom deserializer
spring.cloud.stream.bindings.consumer-in-0.producer.use-native-decoding = true

redis.server = redis
redis.port = 6379

spring.zipkin.baseUrl=http://zipkin:9411
spring.sleuth.sampler.percentage= 1